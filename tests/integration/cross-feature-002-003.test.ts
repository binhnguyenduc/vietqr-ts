/**
 * Cross-feature integration test: Feature 002 (Generation) + Feature 003 (Decoding)
 *
 * This test verifies 100% compatibility between QR generation (002) and decoding (003).
 * Every QR string generated by generateVietQR should be perfectly parseable and validatable.
 *
 * @module tests/integration/cross-feature-002-003
 */

import { describe, it, expect } from 'vitest';
import { generateVietQR } from '../../src/generators/vietqr';
import { parse } from '../../src/parsers';
import { validate } from '../../src/validators';
import { isSuccessResult } from '../../src/types/decode';
import type { VietQRConfig } from '../../src/types/config';

describe('Cross-Feature Integration: Generation (002) + Decoding (003)', () => {
  describe('Static Account QR (QRIBFTTA)', () => {
    it('should generate and parse static account QR with minimal config', () => {
      // Generate QR
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '01234567',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '11' // Static
      };

      const generated = generateVietQR(config);
      expect(generated.rawData).toBeDefined();
      expect(generated.crc).toBeDefined();

      // Parse generated QR
      const parseResult = parse(generated.rawData);
      expect(isSuccessResult(parseResult)).toBe(true);

      if (!isSuccessResult(parseResult)) {
        throw new Error('Parse failed');
      }

      // Verify parsed data matches generation config
      expect(parseResult.data.bankCode).toBe('970403');
      expect(parseResult.data.accountNumber).toBe('01234567');
      expect(parseResult.data.initiationMethod).toBe('static');
      expect(parseResult.data.currency).toBe('704'); // Default VND
      expect(parseResult.data.countryCode).toBe('VN'); // Default Vietnam

      // Validate parsed data
      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
      expect(validation.errors).toHaveLength(0);
    });

    it('should generate and parse static account QR with full config', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '0011012345678',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '11',
        currency: '704',
        country: 'VN',
        purpose: 'Monthly subscription'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.bankCode).toBe('970403');
      expect(parseResult.data.accountNumber).toBe('0011012345678');
      expect(parseResult.data.message).toBe('Monthly subscription');
      expect(parseResult.data.initiationMethod).toBe('static');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
      expect(validation.isCorrupted).toBe(false);
    });
  });

  describe('Dynamic Account QR with Amount (QRIBFTTA)', () => {
    it('should generate and parse dynamic account QR with amount', () => {
      const config: VietQRConfig = {
        bankBin: '970415',
        accountNumber: '87654321',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12', // Dynamic
        amount: '50000'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.bankCode).toBe('970415');
      expect(parseResult.data.accountNumber).toBe('87654321');
      expect(parseResult.data.amount).toBe('50000');
      expect(parseResult.data.initiationMethod).toBe('dynamic');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });

    it('should generate and parse dynamic QR with decimal amount', () => {
      const config: VietQRConfig = {
        bankBin: '970422',
        accountNumber: '123456789',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12',
        amount: '199.50',
        purpose: 'Payment for order #12345'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.amount).toBe('199.50');
      expect(parseResult.data.message).toBe('Payment for order #12345');
      expect(parseResult.data.initiationMethod).toBe('dynamic');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });

    it('should generate and parse dynamic QR with large amount', () => {
      const config: VietQRConfig = {
        bankBin: '970436',
        accountNumber: '999888777',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12',
        amount: '99999999.99' // Max amount: 13 chars
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.amount).toBe('99999999.99');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });
  });

  describe('Card Transfer QR (QRIBFTTC)', () => {
    it('should generate and parse static card QR', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        cardNumber: '1234567890123456',
        serviceCode: 'QRIBFTTC',
        initiationMethod: '11'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.bankCode).toBe('970403');
      expect(parseResult.data.accountNumber).toBe('1234567890123456');
      expect(parseResult.data.initiationMethod).toBe('static');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });

    it('should generate and parse dynamic card QR with amount', () => {
      const config: VietQRConfig = {
        bankBin: '970415',
        cardNumber: '9876543210987654',
        serviceCode: 'QRIBFTTC',
        initiationMethod: '12',
        amount: '75000',
        purpose: 'Card payment'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.accountNumber).toBe('9876543210987654');
      expect(parseResult.data.amount).toBe('75000');
      expect(parseResult.data.message).toBe('Card payment');
      expect(parseResult.data.initiationMethod).toBe('dynamic');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });
  });

  describe('Bill Payment QR', () => {
    it('should generate and parse QR with bill number', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '11223344',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12',
        amount: '120000',
        billNumber: 'BILL202412345' // Alphanumeric only
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      // Note: billNumber may not be parsed back (depends on parser implementation)
      expect(parseResult.data.amount).toBe('120000');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });
  });

  describe('Reference Label QR', () => {
    it('should generate and parse QR with reference label', () => {
      const config: VietQRConfig = {
        bankBin: '970422',
        accountNumber: '55667788',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12',
        amount: '250000',
        referenceLabel: 'REF123456'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      // Note: referenceLabel may not be parsed back (depends on parser implementation)
      expect(parseResult.data.amount).toBe('250000');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });
  });

  describe('Multiple Bank BINs', () => {
    const banks = [
      { bin: '970403', name: 'Sacombank' },
      { bin: '970415', name: 'Vietinbank' },
      { bin: '970422', name: 'MB Bank' },
      { bin: '970436', name: 'Vietcombank' },
      { bin: '970418', name: 'BIDV' }
    ];

    banks.forEach(bank => {
      it(`should generate and parse QR for ${bank.name} (${bank.bin})`, () => {
        const config: VietQRConfig = {
          bankBin: bank.bin,
          accountNumber: '123456789',
          serviceCode: 'QRIBFTTA',
          initiationMethod: '11'
        };

        const generated = generateVietQR(config);
        const parseResult = parse(generated.rawData);

        expect(isSuccessResult(parseResult)).toBe(true);
        if (!isSuccessResult(parseResult)) return;

        expect(parseResult.data.bankCode).toBe(bank.bin);

        const validation = validate(parseResult.data, generated.rawData);
        expect(validation.isValid).toBe(true);
      });
    });
  });

  describe('Edge Cases and Boundary Values', () => {
    it('should handle minimum length account number (1 digit)', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '1',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '11'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.accountNumber).toBe('1');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });

    it('should handle maximum length account number (19 digits)', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '1234567890123456789',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '11'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.accountNumber).toBe('1234567890123456789');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });

    it('should handle minimum amount (0.01)', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '123456',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12',
        amount: '0.01'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.amount).toBe('0.01');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });

    it('should handle purpose with special characters', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '123456',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '11',
        purpose: 'Test-123 & Payment!'
      };

      const generated = generateVietQR(config);
      const parseResult = parse(generated.rawData);

      expect(isSuccessResult(parseResult)).toBe(true);
      if (!isSuccessResult(parseResult)) return;

      expect(parseResult.data.message).toBe('Test-123 & Payment!');

      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
    });
  });

  describe('CRC Integrity', () => {
    it('should generate valid CRC that passes validation', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '123456789',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '12',
        amount: '100000'
      };

      const generated = generateVietQR(config);

      // CRC should be 4 uppercase hex characters
      expect(generated.crc).toMatch(/^[0-9A-F]{4}$/);

      // Parse should succeed
      const parseResult = parse(generated.rawData);
      expect(isSuccessResult(parseResult)).toBe(true);

      if (!isSuccessResult(parseResult)) return;

      // Validation should not report CRC errors
      const validation = validate(parseResult.data, generated.rawData);
      expect(validation.isValid).toBe(true);
      expect(validation.errors.some(e => e.code === 'CHECKSUM_MISMATCH')).toBe(false);
    });

    it('should detect corrupted QR strings', () => {
      const config: VietQRConfig = {
        bankBin: '970403',
        accountNumber: '123456789',
        serviceCode: 'QRIBFTTA',
        initiationMethod: '11'
      };

      const generated = generateVietQR(config);

      // Corrupt the QR string by changing a character (not in CRC)
      const corrupted = generated.rawData.substring(0, 10) +
        'X' +
        generated.rawData.substring(11);

      // Parse might succeed but validation should fail
      const parseResult = parse(corrupted);

      if (isSuccessResult(parseResult)) {
        const validation = validate(parseResult.data, corrupted);
        // Either isCorrupted should be true OR there should be validation errors
        expect(validation.isCorrupted || validation.errors.length > 0).toBe(true);
      }
    });
  });

  describe('Full Round-Trip Tests', () => {
    const testCases = [
      {
        name: 'Simple static QR',
        config: {
          bankBin: '970403',
          accountNumber: '12345',
          serviceCode: 'QRIBFTTA' as const,
          initiationMethod: '11' as const
        }
      },
      {
        name: 'Dynamic QR with all fields',
        config: {
          bankBin: '970415',
          accountNumber: '987654321',
          serviceCode: 'QRIBFTTA' as const,
          initiationMethod: '12' as const,
          amount: '500000',
          currency: '704',
          country: 'VN',
          purpose: 'Test payment'
        }
      },
      {
        name: 'Card with amount',
        config: {
          bankBin: '970422',
          cardNumber: '1111222233334444',
          serviceCode: 'QRIBFTTC' as const,
          initiationMethod: '12' as const,
          amount: '250000'
        }
      }
    ];

    testCases.forEach(({ name, config }) => {
      it(`should complete full round-trip for: ${name}`, () => {
        // Step 1: Generate
        const generated = generateVietQR(config);
        expect(generated).toBeDefined();
        expect(generated.rawData).toBeTruthy();

        // Step 2: Parse
        const parseResult = parse(generated.rawData);
        expect(isSuccessResult(parseResult)).toBe(true);

        if (!isSuccessResult(parseResult)) {
          throw new Error(`Parse failed for ${name}`);
        }

        // Step 3: Validate
        const validation = validate(parseResult.data, generated.rawData);
        expect(validation.isValid).toBe(true);
        expect(validation.errors).toHaveLength(0);

        // Step 4: Verify key fields match
        expect(parseResult.data.bankCode).toBe(config.bankBin);

        if ('accountNumber' in config) {
          expect(parseResult.data.accountNumber).toBe(config.accountNumber);
        }

        if ('cardNumber' in config) {
          expect(parseResult.data.accountNumber).toBe(config.cardNumber);
        }

        if (config.amount) {
          expect(parseResult.data.amount).toBe(config.amount);
        }

        expect(parseResult.data.initiationMethod).toBe(
          config.initiationMethod === '11' ? 'static' : 'dynamic'
        );
      });
    });
  });

  describe('100% Compatibility Verification', () => {
    it('should successfully round-trip all valid generated QR codes', () => {
      const banks = ['970403', '970415', '970422', '970436', '970418'];
      const serviceCodes: ('QRIBFTTA' | 'QRIBFTTC')[] = ['QRIBFTTA', 'QRIBFTTC'];
      const initiationMethods: ('11' | '12')[] = ['11', '12'];

      let attemptCount = 0;
      let successCount = 0;

      // Try to generate 50 valid QR codes
      while (attemptCount < 200 && successCount < 50) {
        attemptCount++;

        const config: VietQRConfig = {
          bankBin: banks[Math.floor(Math.random() * banks.length)],
          accountNumber: String(Math.floor(Math.random() * 1000000000)),
          serviceCode: serviceCodes[Math.floor(Math.random() * serviceCodes.length)],
          initiationMethod: initiationMethods[Math.floor(Math.random() * initiationMethods.length)]
        };

        if (config.initiationMethod === '12') {
          config.amount = String(Math.floor(Math.random() * 10000000));
        }

        try {
          // Generate (this validates the config)
          const generated = generateVietQR(config);

          // Parse
          const parseResult = parse(generated.rawData);

          if (isSuccessResult(parseResult)) {
            // Validate
            const validation = validate(parseResult.data, generated.rawData);

            if (validation.isValid) {
              successCount++;
            }
          }
        } catch (error) {
          // Skip invalid configurations (validation errors)
          continue;
        }
      }

      // All successfully generated QR codes should parse and validate correctly
      // Expect at least 50 successful round-trips
      expect(successCount).toBeGreaterThanOrEqual(50);
    });
  });
});
